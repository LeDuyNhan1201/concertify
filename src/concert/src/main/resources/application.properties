#quarkus.log.category."io.quarkus".level=DEBUG
#quarkus.log.category."io.quarkus".min-level=DEBUG
quarkus.profile=dev

# --------- HTTP ---------
quarkus.default-locale=en-US
#quarkus.http.root-path=concerts
quarkus.http.non-application-root-path=dev
quarkus.http.port=${HTTP_PORT:62000}
quarkus.http.test-port=${HTTP_TEST_PORT:62001}
quarkus.http.test-timeout=200s
quarkus.rest-client.http2=true

# --------- HTTPS (Enable SSL/TLS) ---------
%dev.quarkus.http.ssl-port=${HTTPS_PORT:62002}
%dev.quarkus.http.ssl.client-auth=NONE
%dev.quarkus.http.insecure-requests=enabled

%dev.quarkus.http.tls-configuration-name=ssl-tls
%dev.quarkus.tls.ssl-tls.key-store.p12.path=${KEY_STORE_PATH:certs/keystore.p12}
%dev.quarkus.tls.ssl-tls.key-store.p12.password=${CERT_SECRET:120103}
%dev.quarkus.tls.ssl-tls.trust-store.p12.path=${TRUST_STORE_PATH:certs/truststore.p12}
%dev.quarkus.tls.ssl-tls.trust-store.p12.password=${CERT_SECRET:120103}

# --------- CORS ---------
%dev.quarkus.http.cors=true
%dev.quarkus.http.cors.origins=/*
%dev.quarkus.http.cors.headers=
%dev.quarkus.http.cors.methods=GET, POST, PUT, PATCH, DELETE
%dev.quarkus.http.cors.exposed-headers=
%dev.quarkus.http.cors.access-control-max-age=24H
%dev.quarkus.http.cors.access-control-allow-credentials=true

# --------- API document ---------
%dev.quarkus.swagger-ui.path=swagger
%dev.quarkus.swagger-ui.title=Concert APIs Document
%dev.quarkus.swagger-ui.theme=outline
%dev.quarkus.swagger-ui.urls.concert=https://${HOST_NAME:localhost}:${quarkus.http.ssl-port}/${quarkus.http.non-application-root-path}/${quarkus.smallrye-openapi.path}
%dev.quarkus.swagger-ui.urls.auth=https://${HOST_NAME:localhost}:61002/${quarkus.http.non-application-root-path}/${quarkus.smallrye-openapi.path}
%dev.quarkus.swagger-ui.urls-primary-name=concert

%dev.quarkus.smallrye-openapi.info-title=Concert Restful APIs
%dev.quarkus.smallrye-openapi.info-description=This is the Restful APIs documentation for Concert Service.
%dev.quarkus.smallrye-openapi.info-version=1.0.0
%dev.quarkus.smallrye-openapi.path=api-docs
%dev.quarkus.smallrye-openapi.servers=https://localhost:${quarkus.http.ssl-port},http://localhost:${quarkus.http.port}
%dev.quarkus.smallrye-openapi.info-terms-of-service=https://localhost:${quarkus.http.ssl-port}/${quarkus.http.non-application-root-path}/api-docs/terms-of-service
%dev.quarkus.smallrye-openapi.info-contact-email=benlun99999@example.com
%dev.quarkus.smallrye-openapi.info-contact-name=Le Duy Nhan
%dev.quarkus.smallrye-openapi.info-contact-url=https://github.com/LeDuyNhan1201
%dev.quarkus.smallrye-openapi.info-license-name=Apache 2.0
%dev.quarkus.smallrye-openapi.info-license-url=https://www.apache.org/licenses/LICENSE-2.0.html

# --------- OIDC & Keycloak Authorization ---------
%dev.quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url}
%dev.quarkus.oidc-client.tls.tls-configuration-name=ssl-tls
%dev.quarkus.oidc-client.grant.type=client
%dev.quarkus.oidc-client.connection-delay=5S
# REST client config
%dev.quarkus.oidc-client.id=${quarkus.oidc.client-id}
%dev.quarkus.oidc-client.client-name=ConcertService
%dev.quarkus.oidc-client.client-id=${quarkus.oidc.client-id}
%dev.quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}
%dev.rest-client.auth-service.url=${AUTH_SERVICE_URL:https://localhost:61002}

## service | web-app
%dev.quarkus.oidc.application-type=service
%dev.quarkus.oidc.auth-server-url=${IDP_SERVER_URL:https://localhost:8443/realms/concertify}
%dev.quarkus.oidc.client-id=${APP_CLIENT_ID:concert-service}
%dev.quarkus.oidc.credentials.secret=${APP_CLIENT_SECRET:ggj3eeGCjmgFsk8Yob5l3PiJ4hieDyod}
%dev.quarkus.oidc.authentication.user-info-required=false
%dev.quarkus.oidc.roles.source=accesstoken
%dev.quarkus.oidc.roles.role-claim-path=roles
%dev.quarkus.oidc.tls.verification=required
%dev.quarkus.oidc.tls.tls-configuration-name=ssl-tls

## Auth Policy
%dev.quarkus.keycloak.policy-enforcer.enable=true
%dev.quarkus.keycloak.policy-enforcer.lazy-load-paths=false

## Public endpoints
%dev.quarkus.keycloak.policy-enforcer.paths.1.enforcement-mode=DISABLED
%dev.quarkus.keycloak.policy-enforcer.paths.1.paths=\
    /${quarkus.http.non-application-root-path}/swagger/*,\
    /${quarkus.http.non-application-root-path}/api-docs,\
    /v1/concerts/seed/*

# --------- MongoDB ---------
%dev.quarkus.mongodb.connection-string= mongodb://${MONGODB_USERNAME:ldnhan}:${MONGODB_PASSWORD:123}@localhost:27017
%dev.quarkus.mongodb.database=concert-service

# --------- Kafka ---------
## Kafka client
%dev.kafka.tls-configuration-name=ssl-tls
%dev.kafka.security.protocol=SASL_SSL
%dev.kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:broker1:39091}

%dev.mp.messaging.connector.smallrye-kafka.schema.registry.url=${SCHEMA_REGISTRY_URL:https://schema-registry1:8081/}
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.truststore.type=PKCS12
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.truststore.location=${TRUST_STORE_PATH:/home/intern-ldnhan2/Desktop/Projects/concertify/src/booking/src/main/resources/certs/truststore.p12}
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.truststore.password=${CERT_SECRET:120103}
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.keystore.type=PKCS12
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.keystore.location=${KEY_STORE_PATH:/home/intern-ldnhan2/Desktop/Projects/concertify/src/booking/src/main/resources/certs/keystore.p12}
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.keystore.password=${CERT_SECRET:120103}
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.key.password=${CERT_SECRET:120103}
%dev.mp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL
%dev.mp.messaging.connector.smallrye-kafka.sasl.mechanism=OAUTHBEARER
%dev.mp.messaging.connector.smallrye-kafka.sasl.jaas.config=\
  org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
    oauth.client.id="${CLIENT_APP_ID:quarkus}" \
    oauth.client.secret="${CLIENT_APP_SECRET:quarkus-secret}" \
    oauth.token.endpoint.uri="${KAFKA_IDP_TOKEN_ENDPOINT:https://keycloak:8443/realms/kafka/protocol/openid-connect/token}" \
    principalClaimName="sub" \
    refresh_ms="3000" \
    oauth.ssl.truststore.type="PKCS12" \
    oauth.ssl.truststore.location="${TRUST_STORE_PATH:/home/intern-ldnhan2/Desktop/Projects/concertify/src/booking/src/main/resources/certs/truststore.p12}" \
    oauth.ssl.truststore.password="${CERT_SECRET:120103}";
%dev.mp.messaging.connector.smallrye-kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

# OUTGOING: Producer
%dev.mp.messaging.outgoing."booking.created-out".bootstrap.servers=${kafka.bootstrap.servers}
%dev.mp.messaging.outgoing."booking.created-out".connector=smallrye-kafka
%dev.mp.messaging.outgoing."booking.created-out".security.protocol=SASL_SSL
%dev.mp.messaging.outgoing."booking.created-out".tls-configuration-name=ssl-tls
%dev.mp.messaging.outgoing."booking.created-out".topic=booking.created
%dev.mp.messaging.outgoing."booking.created-out".value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# OUTGOING: Producer
%dev.mp.messaging.outgoing."rollback.booking.updated-out".bootstrap.servers=${kafka.bootstrap.servers}
%dev.mp.messaging.outgoing."rollback.booking.updated-out".connector=smallrye-kafka
%dev.mp.messaging.outgoing."rollback.booking.updated-out".security.protocol=SASL_SSL
%dev.mp.messaging.outgoing."rollback.booking.updated-out".tls-configuration-name=ssl-tls
%dev.mp.messaging.outgoing."rollback.booking.updated-out".topic=rollback.booking.updated
%dev.mp.messaging.outgoing."rollback.booking.updated-out".value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# OUTGOING: Producer
%dev.mp.messaging.outgoing."rollback.booking.deleted-out".bootstrap.servers=${kafka.bootstrap.servers}
%dev.mp.messaging.outgoing."rollback.booking.deleted-out".connector=smallrye-kafka
%dev.mp.messaging.outgoing."rollback.booking.deleted-out".security.protocol=SASL_SSL
%dev.mp.messaging.outgoing."rollback.booking.deleted-out".tls-configuration-name=ssl-tls
%dev.mp.messaging.outgoing."rollback.booking.deleted-out".topic=rollback.booking.deleted
%dev.mp.messaging.outgoing."rollback.booking.deleted-out".value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# INCOMING: Consumer
%dev.mp.messaging.incoming."booking.updated-in".bootstrap.servers=${kafka.bootstrap.servers}
%dev.mp.messaging.incoming."booking.updated-in".connector=smallrye-kafka
%dev.mp.messaging.incoming."booking.updated-in".security.protocol=SASL_SSL
%dev.mp.messaging.incoming."booking.updated-in".tls-configuration-name=ssl-tls
%dev.mp.messaging.incoming."booking.updated-in".topic=booking.updated
%dev.mp.messaging.incoming."booking.updated-in".value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
%dev.mp.messaging.incoming."booking.updated-in".group.id=concert-service.booking.updated
%dev.mp.messaging.incoming."booking.updated-in".auto.offset.reset=earliest
%dev.mp.messaging.incoming."booking.updated-in".enable.auto.commit=false

%dev.mp.messaging.incoming."booking.updated-in".failure-strategy=dead-letter-queue
%dev.mp.messaging.incoming."booking.updated-in".dead-letter-queue.topic=booking.updated.dlq
%dev.mp.messaging.incoming."booking.updated-in".dead-letter-queue.key.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.incoming."booking.updated-in".dead-letter-queue.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# INCOMING: Consumer
%dev.mp.messaging.incoming."booking.deleted-in".bootstrap.servers=${kafka.bootstrap.servers}
%dev.mp.messaging.incoming."booking.deleted-in".connector=smallrye-kafka
%dev.mp.messaging.incoming."booking.deleted-in".security.protocol=SASL_SSL
%dev.mp.messaging.incoming."booking.deleted-in".tls-configuration-name=ssl-tls
%dev.mp.messaging.incoming."booking.deleted-in".topic=booking.deleted
%dev.mp.messaging.incoming."booking.deleted-in".value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
%dev.mp.messaging.incoming."booking.deleted-in".group.id=concert-service.booking.deleted
%dev.mp.messaging.incoming."booking.deleted-in".auto.offset.reset=earliest
%dev.mp.messaging.incoming."booking.deleted-in".enable.auto.commit=false

%dev.mp.messaging.incoming."booking.deleted-in".failure-strategy=dead-letter-queue
%dev.mp.messaging.incoming."booking.deleted-in".dead-letter-queue.topic=booking.deleted.dlq
%dev.mp.messaging.incoming."booking.deleted-in".dead-letter-queue.key.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.incoming."booking.deleted-in".dead-letter-queue.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# INCOMING: Consumer
%dev.mp.messaging.incoming."rollback.booking.created-in".bootstrap.servers=${kafka.bootstrap.servers}
%dev.mp.messaging.incoming."rollback.booking.created-in".connector=smallrye-kafka
%dev.mp.messaging.incoming."rollback.booking.created-in".security.protocol=SASL_SSL
%dev.mp.messaging.incoming."rollback.booking.created-in".tls-configuration-name=ssl-tls
%dev.mp.messaging.incoming."rollback.booking.created-in".topic=rollback.booking.created
%dev.mp.messaging.incoming."rollback.booking.created-in".value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
%dev.mp.messaging.incoming."rollback.booking.created-in".group.id=concert-service.rollback.booking.created
%dev.mp.messaging.incoming."rollback.booking.created-in".auto.offset.reset=earliest
%dev.mp.messaging.incoming."rollback.booking.created-in".enable.auto.commit=false

%dev.mp.messaging.incoming."rollback.booking.created-in".failure-strategy=dead-letter-queue
%dev.mp.messaging.incoming."rollback.booking.created-in".dead-letter-queue.topic=rollback.booking.created.dlq
%dev.mp.messaging.incoming."rollback.booking.created-in".dead-letter-queue.key.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.incoming."rollback.booking.created-in".dead-letter-queue.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
