## --------- Dev service ---------
quarkus.devservices.timeout=200s
quarkus.keycloak.devservices.service-name=keycloak
quarkus.keycloak.devservices.shared=true
#quarkus.keycloak.devservices.port=40000
quarkus.keycloak.devservices.realm-path=test-realm.json

quarkus.kafka.devservices.service-name=kafka
quarkus.kafka.devservices.shared=true
quarkus.apicurio-registry.devservices.service-name=schema-registry
quarkus.apicurio-registry.devservices.shared=true

## --------- OIDC & Keycloak Authorization ---------
%prod.quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url}
quarkus.oidc-client.grant.type=client
quarkus.oidc-client.connection-delay=5S
# REST client config
quarkus.oidc-client.id=${quarkus.oidc.client-id}
quarkus.oidc-client.client-name=ConcertService
quarkus.oidc-client.client-id=${quarkus.oidc.client-id}
quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}

rest-client.auth-service.url=https://localhost:61002

%prod.quarkus.oidc.auth-server-url=http://localhost:40000/realms/concertify
quarkus.oidc.client-id=concert-service
quarkus.oidc.credentials.secret=ggj3eeGCjmgFsk8Yob5l3PiJ4hieDyod
quarkus.oidc.authentication.user-info-required=false
quarkus.oidc.roles.source=accesstoken
quarkus.oidc.roles.role-claim-path=roles

## Auth Policy
quarkus.keycloak.policy-enforcer.enable=true
quarkus.keycloak.policy-enforcer.lazy-load-paths=false

## Public endpoints
quarkus.keycloak.policy-enforcer.paths.1.enforcement-mode=DISABLED
quarkus.keycloak.policy-enforcer.paths.1.paths=\
    /v1/hello

# OUTGOING: Producer
mp.messaging.outgoing."booking.created-out".connector=smallrye-kafka
mp.messaging.outgoing."booking.created-out".auto.register.schemas=true
mp.messaging.outgoing."booking.created-out".topic=booking.created
mp.messaging.outgoing."booking.created-out".value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# OUTGOING: Producer
mp.messaging.outgoing."rollback.booking.updated-out".connector=smallrye-kafka
mp.messaging.outgoing."rollback.booking.updated-out".auto.register.schemas=true
mp.messaging.outgoing."rollback.booking.updated-out".topic=rollback.booking.updated
mp.messaging.outgoing."rollback.booking.updated-out".value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# OUTGOING: Producer
mp.messaging.outgoing."rollback.booking.deleted-out".connector=smallrye-kafka
mp.messaging.outgoing."rollback.booking.deleted-out".auto.register.schemas=true
mp.messaging.outgoing."rollback.booking.deleted-out".topic=rollback.booking.deleted
mp.messaging.outgoing."rollback.booking.deleted-out".value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# INCOMING: Consumer
mp.messaging.incoming."booking.updated-in".connector=smallrye-kafka
mp.messaging.incoming."booking.updated-in".topic=booking.updated
mp.messaging.incoming."booking.updated-in".value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.incoming."booking.updated-in".group.id=concert-service.booking.updated
mp.messaging.incoming."booking.updated-in".auto.offset.reset=earliest
mp.messaging.incoming."booking.updated-in".enable.auto.commit=false

mp.messaging.incoming."booking.updated-in".failure-strategy=dead-letter-queue
mp.messaging.incoming."booking.updated-in".dead-letter-queue.topic=booking.updated.dlq
mp.messaging.incoming."booking.updated-in".dead-letter-queue.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.incoming."booking.updated-in".dead-letter-queue.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# INCOMING: Consumer
mp.messaging.incoming."booking.deleted-in".connector=smallrye-kafka
mp.messaging.incoming."booking.deleted-in".topic=booking.deleted
mp.messaging.incoming."booking.deleted-in".value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.incoming."booking.deleted-in".group.id=concert-service.booking.deleted
mp.messaging.incoming."booking.deleted-in".auto.offset.reset=earliest
mp.messaging.incoming."booking.deleted-in".enable.auto.commit=false

mp.messaging.incoming."booking.deleted-in".failure-strategy=dead-letter-queue
mp.messaging.incoming."booking.deleted-in".dead-letter-queue.topic=booking.deleted.dlq
mp.messaging.incoming."booking.deleted-in".dead-letter-queue.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.incoming."booking.deleted-in".dead-letter-queue.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer


# INCOMING: Consumer
mp.messaging.incoming."rollback.booking.created-in".connector=smallrye-kafka
mp.messaging.incoming."rollback.booking.created-in".topic=rollback.booking.created
mp.messaging.incoming."rollback.booking.created-in".value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.incoming."rollback.booking.created-in".group.id=concert-service.rollback.booking.created
mp.messaging.incoming."rollback.booking.created-in".auto.offset.reset=earliest
mp.messaging.incoming."rollback.booking.created-in".enable.auto.commit=false

mp.messaging.incoming."rollback.booking.created-in".failure-strategy=dead-letter-queue
mp.messaging.incoming."rollback.booking.created-in".dead-letter-queue.topic=rollback.booking.created.dlq
mp.messaging.incoming."rollback.booking.created-in".dead-letter-queue.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.incoming."rollback.booking.created-in".dead-letter-queue.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer


