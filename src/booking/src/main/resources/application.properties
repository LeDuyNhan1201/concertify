#quarkus.log.category."io.quarkus".level=DEBUG
#quarkus.log.category."io.quarkus".min-level=DEBUG
quarkus.profile=dev

# --------- HTTP ---------
quarkus.default-locale=en-US
quarkus.http.root-path=bookings
quarkus.http.non-application-root-path=dev
quarkus.http.port=${HTTP_PORT:63000}
quarkus.http.test-port=${HTTP_TEST_PORT:63001}
quarkus.http.test-timeout=90s

# --------- HTTPS (Enable SSL/TLS) ---------
%dev.quarkus.http.ssl-port=${HTTPS_PORT:63002}
%dev.quarkus.http.ssl.client-auth=NONE
%dev.quarkus.http.insecure-requests=enabled
%dev.quarkus.ssl.native=true
%dev.quarkus.tls.trust-all=true

%dev.quarkus.http.tls-configuration-name=ssl-tls
%dev.quarkus.tls.ssl-tls.key-store.p12.path=${KEY_STORE_PATH:certs/keystore.p12}
%dev.quarkus.tls.ssl-tls.key-store.p12.password=${CERT_SECRET:120103}
%dev.quarkus.tls.ssl-tls.trust-store.p12.path=${TRUST_STORE_PATH:certs/truststore.p12}
%dev.quarkus.tls.ssl-tls.trust-store.p12.password=${CERT_SECRET:120103}

# --------- CORS ---------
%dev.quarkus.http.cors=true
%dev.quarkus.http.cors.origins=/*
%dev.quarkus.http.cors.headers=
%dev.quarkus.http.cors.methods=GET, POST, PUT, PATCH, DELETE
%dev.quarkus.http.cors.exposed-headers=
%dev.quarkus.http.cors.access-control-max-age=24H
%dev.quarkus.http.cors.access-control-allow-credentials=true

# --------- API document ---------
%dev.quarkus.swagger-ui.path=swagger
%dev.quarkus.swagger-ui.title=Booking APIs Document
%dev.quarkus.swagger-ui.theme=outline
%dev.quarkus.swagger-ui.urls.auth=https://${HOST_NAME:localhost}:${quarkus.http.ssl-port}/auth/${quarkus.http.non-application-root-path}/${quarkus.smallrye-openapi.path}
%dev.quarkus.swagger-ui.urls.concert=https://${HOST_NAME:localhost}:${quarkus.http.ssl-port}/concerts/${quarkus.http.non-application-root-path}/${quarkus.smallrye-openapi.path}
%dev.quarkus.swagger-ui.urls.booking=https://${HOST_NAME:localhost}:${quarkus.http.ssl-port}/${quarkus.http.root-path}/${quarkus.http.non-application-root-path}/${quarkus.smallrye-openapi.path}
%dev.quarkus.swagger-ui.urls-primary-name=booking

%dev.quarkus.smallrye-openapi.info-title=Booking Restful APIs
%dev.quarkus.smallrye-openapi.info-description=This is the Restful APIs documentation for Booking Service.
%dev.quarkus.smallrye-openapi.info-version=1.0.0
%dev.quarkus.smallrye-openapi.path=api-docs
%dev.quarkus.smallrye-openapi.servers=https://localhost:${quarkus.http.ssl-port},http://localhost:${quarkus.http.port}
%dev.quarkus.smallrye-openapi.info-terms-of-service=https://localhost:${quarkus.http.ssl-port}/ ${server.servlet.context-path}/api-docs/terms-of-service
%dev.quarkus.smallrye-openapi.info-contact-email=benlun99999@example.com
%dev.quarkus.smallrye-openapi.info-contact-name=Le Duy Nhan
%dev.quarkus.smallrye-openapi.info-contact-url=https://github.com/LeDuyNhan1201
%dev.quarkus.smallrye-openapi.info-license-name=Apache 2.0
%dev.quarkus.smallrye-openapi.info-license-url=https://www.apache.org/licenses/LICENSE-2.0.html

# --------- OIDC & Keycloak Authorization ---------
## service | web-app
%dev.quarkus.oidc.application-type=service
%dev.quarkus.oidc.auth-server-url=https://localhost:8443/realms/concertify
%dev.quarkus.oidc.client-id=${APP_CLIENT_ID:booking-service}
%dev.quarkus.oidc.credentials.secret=${APP_CLIENT_SECRET:emGYC5XPSmeWUl2hfDbmlnqcCU500bac}
%dev.quarkus.oidc.authentication.user-info-required=false
%dev.quarkus.oidc.roles.source=accesstoken
%dev.quarkus.oidc.roles.role-claim-path=roles
%dev.quarkus.oidc.tls.verification=required
%dev.quarkus.oidc.tls.tls-configuration-name=ssl-tls

## Auth Policy
%dev.quarkus.keycloak.policy-enforcer.enable=true
%dev.quarkus.keycloak.policy-enforcer.lazy-load-paths=false

## Public endpoints
%dev.quarkus.keycloak.policy-enforcer.paths.1.enforcement-mode=DISABLED
%dev.quarkus.keycloak.policy-enforcer.paths.1.paths=\
    /${quarkus.http.root-path}/${quarkus.http.non-application-root-path}/swagger/*,\
    /${quarkus.http.root-path}/${quarkus.http.non-application-root-path}/api-docs,\
    /${quarkus.http.root-path}/hello,\
    /${quarkus.http.root-path}/hello/consumed

# --------- MongoDB ---------
%dev.quarkus.mongodb.connection-string= mongodb://${MONGODB_USERNAME:ldnhan}:${MONGODB_PASSWORD:123}@localhost:27017
%dev.quarkus.mongodb.database=booking-service

# --------- Kafka ---------
## Kafka client
%dev.kafka.tls-configuration-name=ssl-tls
%dev.kafka.security.protocol=SASL_SSL
%dev.kafka.bootstrap.servers=broker1:39091

%dev.mp.messaging.connector.smallrye-kafka.schema.registry.url=https://schema-registry1:8081/
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.truststore.type=PKCS12
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.truststore.location=${TRUST_STORE_PATH:/home/ben/Projects/concertify/src/booking/src/main/resources/certs/truststore.p12}
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.truststore.password=${CERT_SECRET:120103}
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.keystore.type=PKCS12
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.keystore.location=${KEY_STORE_PATH:/home/ben/Projects/concertify/src/booking/src/main/resources/certs/keystore.p12}
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.keystore.password=${CERT_SECRET:120103}
%dev.mp.messaging.connector.smallrye-kafka.schema.registry.ssl.key.password=${CERT_SECRET:120103}
%dev.mp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL
%dev.mp.messaging.connector.smallrye-kafka.sasl.mechanism=OAUTHBEARER
%dev.mp.messaging.connector.smallrye-kafka.sasl.jaas.config=\
  org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
    oauth.client.id="${CLIENT_APP_ID:quarkus}" \
    oauth.client.secret="${CLIENT_APP_SECRET:quarkus-secret}" \
    oauth.token.endpoint.uri="${IDP_TOKEN_ENDPOINT:https://keycloak:8443/realms/kafka/protocol/openid-connect/token}" \
    principalClaimName="sub" \
    refresh_ms="3000" \
    oauth.ssl.truststore.type="PKCS12" \
    oauth.ssl.truststore.location="${TRUST_STORE_PATH:/home/ben/Projects/concertify/src/booking/src/main/resources/certs/truststore.p12}" \
    oauth.ssl.truststore.password="${CERT_SECRET:120103}";
%dev.mp.messaging.connector.smallrye-kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

# INCOMING: Consumer
%dev.mp.messaging.incoming.greeting-in.bootstrap.servers=${kafka.bootstrap.servers}
%dev.mp.messaging.incoming.greeting-in.connector=smallrye-kafka
%dev.mp.messaging.incoming.greeting-in.security.protocol=SASL_SSL
%dev.mp.messaging.incoming.greeting-in.tls-configuration-name=ssl-tls
%dev.mp.messaging.incoming.greeting-in.topic=greeting
%dev.mp.messaging.incoming.greeting-in.key.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.incoming.greeting-in.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
%dev.mp.messaging.incoming.greeting-in.group.id=greeting-group
%dev.mp.messaging.incoming.greeting-in.auto.offset.reset=earliest
%dev.mp.messaging.incoming.greeting-in.enable.auto.commit=false

# OUTGOING: Producer
%dev.mp.messaging.outgoing.greeting-out.bootstrap.servers=${kafka.bootstrap.servers}
%dev.mp.messaging.outgoing.greeting-out.connector=smallrye-kafka
%dev.mp.messaging.outgoing.greeting-out.security.protocol=SASL_SSL
%dev.mp.messaging.outgoing.greeting-out.tls-configuration-name=ssl-tls
%dev.mp.messaging.outgoing.greeting-out.topic=greeting
%dev.mp.messaging.outgoing.greeting-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.outgoing.greeting-out.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

## --------- REST Clients ---------
## Your configuration properties
#quarkus.rest-client.extensions-api.verify-host=false
##quarkus.rest-client.extensions-api.hostname-verifier=
#quarkus.rest-client.follow-redirects=true
#quarkus.rest-client.tls-configuration-name=ssl-tls
#quarkus.rest-client.http2=true
#quarkus.rest-client."org.tma.intern.booking.repository.UsersRestClient".url=https://localhost:61002/auth
#quarkus.rest-client."org.tma.intern.booking.repository.UsersRestClient".scope=jakarta.inject.ApplicationScoped
##quarkus.rest-client."org.tma.intern.booking.repository.UsersRestClient".url=https://localhost:61002/auth
##quarkus.rest-client."org.tma.intern.booking.repository.UsersRestClient".scope=jakarta.inject.ApplicationScoped