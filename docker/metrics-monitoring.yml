services:
  # --------- OpenTelemetry Collector ---------
  otel-collector:
    image: otel/opentelemetry-collector-contrib:${OTEL_COLLECTOR_DOCKER_TAG:-latest}
    container_name: otel-collector
    depends_on:
      tempo:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    ports:
      - "8888:8888"
      - "8889:8889"
      - "4317:4317" # otlp grpc
      - "4318:4318" # otlp http
    networks:
      - concertify-network
    command: [ "--config=/etc/otelcol-config.yml", "--feature-gates=pkg.translator.prometheus.NormalizeName"]
    healthcheck:
#      test: >
#        sh -c 'curl --silent --insecure -o /dev/null -w "%{http_code}" http://otel-collector:4318/v1/metrics | grep -E "^(200|405)$" > /dev/null'
      test: ["CMD", "nc", "-z", "otel-collector", "4318"]
      start_period: 10s
      interval: 10s
      timeout: 30s
      retries: 3
    restart: always # unless-stopped
    volumes:
      - ./otel-collector/otelcol-config.yml:/etc/otelcol-config.yml

  # --------- Prometheus ---------
  prometheus:
    image: prom/prometheus:${PROMETHEUS_DOCKER_TAG:-latest}
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - concertify-network
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=1h
      - --web.enable-remote-write-receiver
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/status || exit 1
      interval: 5s
      start_period: 10s
      timeout: 10s
      retries: 3
    restart: always # unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  # --------- Grafana ---------
  grafana:
    image: grafana/grafana:${GRAFANA_DOCKER_TAG:-latest}
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - concertify-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://grafana:3000 || exit 1
      interval: 5s
      start_period: 10s
      timeout: 10s
      retries: 3
    restart: always # unless-stopped
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: 123
#      GF_AUTH_ANONYMOUS_ENABLED: true
#      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
#      GF_AUTH_DISABLE_LOGIN_FORM: true

  # --------- Grafana Loki ---------
  loki:
    image: grafana/loki:${GRAFANA_DOCKER_TAG:-latest}
    container_name: loki
    ports:
      - "3100:3100"
    networks:
      - concertify-network
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://loki:3100/ready" ]
      interval: 10s
      timeout: 10s
      start_period: 10s
      retries: 3
    restart: always # unless-stopped
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - loki-data:/loki

  # --------- Logstash ---------
  logstash:
    build:
      context: ./logstash
      args:
        LOGSTASH_DOCKER_TAG: ${LOGSTASH_DOCKER_TAG:-9.0.2}
    container_name: logstash
    depends_on:
      loki:
        condition: service_healthy
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    networks:
      - concertify-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://logstash:9600" ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: always # unless-stopped
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"

  # --------- Grafana Tempo ---------
  init-tempo:
    image: &tempoImage grafana/tempo:${GRAFANA_DOCKER_TAG:-latest}
    container_name: init-tempo
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    restart: no
    volumes:
      - tempo-data:/var/tempo

  tempo:
    image: *tempoImage
    container_name: tempo
    depends_on:
      init-tempo:
        condition: service_completed_successfully
    ports:
      - "3200:3200" # tempo
      - "9096:9095" # tempo grpc
    networks:
      - concertify-network
    command: [ "-config.file=/etc/tempo.yaml" ]
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://tempo:3200/ready" ]
      interval: 10s
      timeout: 10s
      start_period: 10s
      retries: 3
    restart: always # unless-stopped
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml:ro
      - tempo-data:/var/tempo

volumes:
  loki-data:
    driver: local
  tempo-data:
    driver: local

networks:
  concertify-network:
    driver: bridge